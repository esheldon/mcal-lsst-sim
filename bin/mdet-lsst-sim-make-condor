#!/usr/bin/env python
import os
import numpy as np
import argparse
import shutil
import esutil as eu


CONDOR_SUBMIT_HEAD = """
Universe = vanilla

Notification = Never

# Run this exe with these args
Executable = mdet-lsst-sim

Image_Size =  1000000

GetEnv = True

kill_sig = SIGINT

should_transfer_files = YES
transfer_input_files = %(sim_config)s

# we don't want open file handles, so transfer when
# the job completes or is evicted
when_to_transfer_output = ON_EXIT_OR_EVICT

environment = "OMP_NUM_THREADS=1"

+Experiment = "astro"
"""

CONDOR_JOB_TEMPLATE = """
+job_name = "%(job_name)s"
Output = %(logfile)s
Arguments = "--seed %(seed)d --config %(sim_config)s --ntrial %(ntrial)d --output %(output)s"
Queue
"""  # noqa


def get_script_file_full():
    res = eu.ostools.exec_process(['which', 'mdet-lsst-sim'])
    assert res[0] == 0

    return str(res[1], 'utf-8').strip()


def copy_script_file():
    script_file = get_script_file_full()
    print('copying', script_file)
    shutil.copy(script_file, '.')


def copy_config_file(config_file):
    print('copying', config_file)
    shutil.copy(config_file, '.')


def get_name_base(run, seed):
    return '%s-%07d' % (run, seed)


def get_condor_script_file(run, seed):
    name = get_name_base(run, seed)
    return '%s.condor' % name


def get_output(run, seed):
    name = get_name_base(run, seed)
    return '%s.fits' % name


def get_logfile(run, seed):
    name = get_name_base(run, seed)
    return '%s.log' % name


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--run', required=True)
    parser.add_argument('--seed', type=int, required=True, help='seed for rng')
    parser.add_argument('--njobs', type=int, required=True)
    parser.add_argument('--ntrial', type=int, required=True,
                        help='number of sim pairs to run for each job')
    parser.add_argument('--config', required=True, help='simulation config')

    return parser.parse_args()


def main():
    args = get_args()

    copy_script_file()
    copy_config_file(args.config)
    sim_config_base = os.path.basename(args.config)

    rng = np.random.RandomState(args.seed)

    condor_file = get_condor_script_file(args.run, args.seed)

    if os.path.exists(condor_file):
        raise RuntimeError('script already exists: %s' % condor_file)

    with open(condor_file, 'w') as fobj:
        fobj.write(CONDOR_SUBMIT_HEAD % {
            'sim_config': sim_config_base,
        })

        for i in range(args.njobs):

            seed = rng.randint(0, 2**19)
            output = get_output(args.run, seed)
            logfile = get_logfile(args.run, seed)
            job_name = '%s-%07d' % (args.run, seed)

            job_text = CONDOR_JOB_TEMPLATE % {
                'job_name': job_name,
                'logfile': logfile,
                'seed': seed,
                'sim_config': sim_config_base,
                'ntrial': args.ntrial,
                'output': output,
            }

            fobj.write(job_text)

    print(condor_file)
    print('wrote:', args.njobs)


main()
