#!/usr/bin/env python
import os
import numpy as np
import argparse
import shutil


CONDOR_SUBMIT_HEAD = """
Universe = vanilla

Notification = Never

# Run this exe with these args
Executable = run.sh

Image_Size =  1000000

GetEnv = True

kill_sig = SIGINT

should_transfer_files = YES
transfer_input_files = %(sim_config)s,%(mdet_config)s

# so transfer when the job completes
when_to_transfer_output = ON_EXIT

environment = "OMP_NUM_THREADS=1"

+Experiment = "astro"
"""

CONDOR_JOB_TEMPLATE = """
+job_name = "%(job_name)s"
transfer_output_files = %(output)s,%(logfile)s
Arguments = %(seed)d %(output)s %(logfile)s
Queue
"""  # noqa


def get_script_file():
    return 'run.sh'


def copy_config_file(config_file):
    print('copying', config_file)
    shutil.copy(config_file, '.')


def get_name_base(run, seed):
    return '%s-%010d' % (run, seed)


def get_condor_script_file(run, seed):
    name = get_name_base(run, seed)
    return '%s.condor' % name


def get_output(run, seed):
    name = get_name_base(run, seed)
    return '%s.fits' % name


def get_logfile(run, seed):
    name = get_name_base(run, seed)
    return '%s.log' % name


SCRIPT_TEMPLATE = r"""#!/usr/bin/bash
seed=$1
output=$2
logfile=$3

mdet-lsst-sim \
    --seed ${seed} \
    --config %(sim_config)s \
    --mdet-config %(mdet_config)s \
    --ntrial %(ntrial)d \
    %(use_sx)s \
    %(deblend)s \
    %(interp_bright)s \
    --output ${output} &> ${logfile}
"""


def write_script(*, ntrial, sim_config, use_sx, deblend, mdet_config, interp_bright):

    script_file = get_script_file()
    print('writing:', script_file)
    with open(script_file, 'w') as fobj:
        text = SCRIPT_TEMPLATE % {
            'ntrial': ntrial,
            'sim_config': sim_config,
            'use_sx': use_sx,
            'deblend': deblend,
            'interp_bright': interp_bright,
            'mdet_config': mdet_config,
        }
        fobj.write(text)

    os.system('chmod 755 %s' % script_file)


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--run', required=True)
    parser.add_argument('--seed', type=int, required=True, help='seed for rng')
    parser.add_argument('--njobs', type=int, required=True)
    parser.add_argument('--ntrial', type=int, required=True,
                        help='number of sim pairs to run for each job')
    parser.add_argument('--config', required=True, help='simulation config')
    parser.add_argument('--mdet-config', required=True, help='mdet config')

    parser.add_argument('--interp-bright', action='store_true',
                        help='interpolate regions marked bright')

    parser.add_argument('--use-sx', action='store_true',
                        help=('use sx based metadetect'))
    parser.add_argument('--deblend', action='store_true',
                        help=('use the lsst deblender'))

    return parser.parse_args()


def main():
    args = get_args()

    copy_config_file(args.config)
    copy_config_file(args.mdet_config)
    sim_config_base = os.path.basename(args.config)
    mdet_config_base = os.path.basename(args.mdet_config)

    if args.use_sx:
        use_sx = '--use-sx'
    else:
        use_sx = ''

    if args.deblend:
        deblend = '--deblend'
    else:
        deblend = ''

    if args.interp_bright:
        interp_bright = '--interp-bright'
    else:
        interp_bright = ''

    rng = np.random.RandomState(args.seed)

    condor_file = get_condor_script_file(args.run, args.seed)

    if os.path.exists(condor_file):
        raise RuntimeError('script already exists: %s' % condor_file)

    write_script(
        ntrial=args.ntrial,
        sim_config=sim_config_base,
        use_sx=use_sx,
        deblend=deblend,
        interp_bright=interp_bright,
        mdet_config=mdet_config_base,
    )

    with open(condor_file, 'w') as fobj:
        fobj.write(CONDOR_SUBMIT_HEAD % {
            'sim_config': sim_config_base,
            'mdet_config': mdet_config_base,
        })

        for i in range(args.njobs):

            seed = rng.randint(0, 2**31)
            output = get_output(args.run, seed)
            logfile = get_logfile(args.run, seed)
            job_name = '%s-%010d' % (args.run, seed)

            job_text = CONDOR_JOB_TEMPLATE % {
                'job_name': job_name,
                'seed': seed,
                'output': output,
                'logfile': logfile,
            }

            fobj.write(job_text)

    print(condor_file)
    print('wrote:', args.njobs)


main()
