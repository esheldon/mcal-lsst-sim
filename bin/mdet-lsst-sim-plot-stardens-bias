#!/usr/bin/env python

import numpy as np
import argparse
import fitsio
import proplot as pplt

ASPECT = 1.618
WIDTH = 3.5

MARKERS = ('o', 'd', '^', 's', 'v', 'h', 'p', 'P', 'H', 'X')

EXTRA_LINESTYLES = {
    'loose dotted': (0, (1, 10)),
    'dense dotted': (0, (1, 1)),

    'loose dashed': (0, (5, 5)),
    'very loose dashed': (0, (5, 10)),
    'dense dashed': (0, (5, 1)),

    'dashdotdot': (0, (3, 5, 1, 5, 1, 5)),

    'dense dashdot': (0, (3, 1, 1, 1)),
    'dense dashdotdot': (0, (3, 1, 1, 1, 1, 1)),
}

LINESTYLES = (
    'solid', 'dashed', 'dotted',
    EXTRA_LINESTYLES['dense dashdot'],
    EXTRA_LINESTYLES['loose dashed'],
    EXTRA_LINESTYLES['dense dashdotdot'],
    EXTRA_LINESTYLES['dense dotted'],
    'dashdot',
    EXTRA_LINESTYLES['very loose dashed'],
    EXTRA_LINESTYLES['dense dashed'],
)
COLORS = [
    '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728',
    '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf',
]


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('flist', nargs='+')
    parser.add_argument('--pdf', required=True)
    parser.add_argument(
        '--add-nostars', action='store_true', help='add nostar point'
    )
    return parser.parse_args()


def read_data(args):

    data = {}
    for f in args.flist:
        tdata = fitsio.read(f)[0]

        # mask_frac = tdata['max_mask_frac']
        # mfrac = tdata['max_mfrac']
        s2n_min = tdata['s2n_min']
        sdens = tdata['max_star_density']
        Tratio_min = tdata['Tratio_min']

        # key = f'imfrac-{mask_frac:.2f}-mfrac-{mfrac:.2f}'
        # key = f's2n-{s2n_min:.1f}-mfrac-{mfrac:.2f}'
        key = f's2n-{s2n_min:.1f}-Tratio-{Tratio_min:.1f}'

        m1err = tdata['m1err'] * 3
        m1high = tdata['m1'] + m1err
        m1low = tdata['m1'] - m1err
        m1 = tdata['m1']

        if key in data:
            data[key]['sdens'].append(sdens)
            data[key]['m1high'].append(m1high)
            data[key]['m1low'].append(m1low)
            data[key]['m1'].append(m1)
            data[key]['m1err'].append(m1err)
        else:
            data[key] = {}
            data[key]['sdens'] = [sdens]
            data[key]['m1high'] = [m1high]
            data[key]['m1low'] = [m1low]
            data[key]['m1'] = [m1]
            data[key]['m1err'] = [m1err]

    fields = ['sdens', 'm1low', 'm1high', 'm1', 'm1err']
    offeach = 0.0
    for i, key in enumerate(data):
        for field in fields:
            data[key][field] = np.array(data[key][field])

        s = data[key]['sdens'].argsort()
        for field in fields:
            data[key][field] = data[key][field][s]

        data[key]['sdens'] += i * offeach

    return data


def key2label(key):
    ks = key.split('-')
    # import IPython; IPython.embed()
    ks = [
        r'S/N $>$',
        ks[1],
        # '$T/T_{PSF} > $',
        # ks[3],
    ]
    # if ks[0] == 'imfrac':
    #     ks = ks[2:]
    # if ks[0] == 's2n':
    #     ks[0] = r'S/N $>$'
    #     ks = ks[:2]
    return ' '.join(ks)


def do_error_plot(args, data):

    alpha = 0.5

    fig, ax = pplt.subplots(refaspect=ASPECT, refwidth=WIDTH)
    ax.set(
        xlabel='maximum stellar density [per sq. arcmin]',
        ylabel=r'$\sigma(\gamma) / \sigma_{min}(\gamma)$',
        xlim=(0, 105),
        ylim=(0.95, 1.6),
    )

    ax.axhline(1, color='black', lw=1)

    errvals = []
    for key in data:
        mdata = data[key]
        errvals += list(data[key]['m1err'])

    # colors = ['-', '.', '-.', '--']
    minval = min(errvals)
    for i, key in enumerate(sorted(data)):
        mdata = data[key]

        label = key2label(key)
        # label = r'mfrac $ < %.2f$' % mfrac
        # label = key

        ax.plot(
            mdata['sdens'],
            mdata['m1err']/minval,
            linestyle=LINESTYLES[i],
            color=COLORS[i],
            marker=MARKERS[i],
            markersize=4,
            markeredgecolor='black',
            label=label,
            alpha=alpha,
        )
        # ax.scatter(
        #     mdata['sdens'],
        #     mdata['m1err']/minval,
        #     linestyle='cycle',
        #     label=label,
        #     alpha=alpha,
        # )

    ax.legend(
        ncols=2,
        frame=True,
        framealpha=1,
        edgecolor='white',
        pad=0.5,
    )
    fname = args.pdf.replace('.pdf', '-error.pdf')
    print('writing:', fname)
    fig.savefig(fname)


def do_bias_plot(args, data):

    alpha = 0.3

    fig, ax = pplt.subplots(refaspect=ASPECT, refwidth=WIDTH)
    ax.set(
        xlabel='maximum stellar density [per sq. arcmin]',
        ylabel='m / 0.001',
        xlim=(0, 105),
        ylim=(-3.8, 3.8),
    )
    # colors = ['red', 'blue', 'cyan', 'green']
    hatches = [
        None,
        '//',
        '\\\\',
        '||',
        # '-',
        # '+',
        # 'x',
        # 'o',
        # 'O',
        # '.',
        # '*',
        None,
    ]
    for i, key in enumerate(sorted(data)):
        mdata = data[key]

        label = key2label(key)

        # ax.plot(
        #     mdata['sdens'],
        #     mdata['m1'] / 0.001,
        #     # label=label,
        #     # markeredgecolor='black',
        #     # alpha=alpha,
        # )
        # ax.scatter(
        #     mdata['sdens'],
        #     mdata['m1'] / 0.001,
        #     label=label,
        #     # markeredgecolor='black',
        #     # alpha=alpha,
        # )

        # if i == 0:
        if True:
            ax.fill_between(
                mdata['sdens'],
                mdata['m1high'] / 0.001,
                mdata['m1low'] / 0.001,
                label=label,
                alpha=alpha,
                # color=colors[i],
                color='black',
                # color='green',
                hatch=hatches[i],
            )

    if args.add_nostars:
        # baseoff = 5
        # offs = np.array([-0.2, -0.1, 0.1, 0.2]) * baseoff
        offs = np.array([-0.75, -0.25, 0.25, 0.75])

        # from run-riz-drcbWP-cells
        mlows = [0.000553132, -5.80659e-05, 0.000227885, -3.67881e-05]
        mhighs = [0.0020267, 0.00131326, 0.00148068, 0.00113388]

        s2ns = [10, 12.5, 15, 20]
        # markers = ['o', 'x', 'O', '*']
        for off, mlow, mhigh, s2n, marker in zip(
            offs, mlows, mhighs, s2ns, MARKERS
        ):
            label = r'no stars S/N $>$ %.1f' % s2n
            # mlow = -6.0565e-05
            # mhigh = 0.00125373
            # m = 0.5 * (mlow + mhigh) / 0.001
            # merr = 0.5 * (mhigh - mlow) / 0.001
            # ax.errorbar(
            #     0 + off, m, merr, ls='',
            #     # marker='o', color='#c06717',
            #     marker=marker,
            #     markersize=4,
            #     alpha=0.5,
            #     label=label,
            # )
            mlow = mlow / 0.001
            mhigh = mhigh / 0.001
            ax.fill_between(
                [off-0.5, off+0.5],
                # [-1, 1],
                [mhigh, mhigh],
                [mlow, mlow],
                label=label,
                alpha=0.5,
            )

    ax.legend(
        ncols=2,
        frame=True,
        framealpha=1,
        edgecolor='white',
        pad=0.5,
    )

    lim = 1
    # zorder = 2
    lcolor = 'seagreen'
    lw = 1
    ax.axhline(0, color='black', lw=lw)
    ax.axhline(-lim, color=lcolor, linestyle='dashed', lw=lw)
    ax.axhline(+lim, color=lcolor, linestyle='dashed', lw=lw)

    ax.axhline(0.4, color='blue', lw=lw, alpha=0.5)

    # ax.text(5, 4, r'$3~\sigma$ range')
    # ax.text(
    #     5,
    #     # -3,
    #     3,
    #     r'99.7\% confidence range',
    # )
    ax.text(
        0.05, 0.1, r'99.7\% confidence range',
        transform=ax.transAxes,
    )

    print('writing:', args.pdf)
    fig.savefig(args.pdf)


def main():
    args = get_args()
    # matplotlib.rcParams['figure.constrained_layout.use'] = True

    data = read_data(args)
    do_bias_plot(args, data)
    do_error_plot(args, data)


main()
