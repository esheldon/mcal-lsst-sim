#!/usr/bin/env python
from pprint import pprint
import argparse
import fitsio
import esutil as eu
from mpi4py.futures import MPIPoolExecutor

NSIGMA = 3
perc = '99.7'


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--run', required=True)
    parser.add_argument('--config', required=True)

    parser.add_argument('--nocancel', action='store_true')

    parser.add_argument('--chunksize', type=int, default=1)

    parser.add_argument('--limit', type=int)

    parser.add_argument('--nowarp', action='store_true')

    return parser.parse_args()


def main():
    from mdet_lsst_sim.doshear import (
        process_set, jackknife, read_config, get_flist, print_stats, get_fname,
    )

    args = get_args()
    config = read_config(args.config)

    flist = get_flist(args.run, limit=args.limit)
    flist.sort()

    print('run:', args.run)
    print('chunksize:', args.chunksize)
    pprint(config)
    print('processing:', len(flist))

    chunksize = args.chunksize
    nf = len(flist)

    inputs = [
        (config, flist[start:start+chunksize])
        for start in range(0, nf, chunksize)
    ]

    with MPIPoolExecutor() as executor:
        dlist = list(executor.map(process_set, inputs))

    dlist = [d for d in dlist if d is not None]

    print('processed:', len(flist))

    data = {}

    for data_dict in dlist:
        for key in data_dict:
            if key not in data:
                data[key] = []
            data[key].append(data_dict[key])

    for key in data:
        print('jackknifing:', key)
        key_data = eu.numpy_util.combine_arrlist(data[key])

        st = jackknife(key_data, nocancel=args.nocancel)
        print_stats(st)

        fname = get_fname(
            run=args.run,
            key=key,
            nocancel=args.nocancel,
            require_primary=config['require_primary'],
        )

        print('writing:', fname)
        fitsio.write(fname, st, clobber=True)


if __name__ == '__main__':
    main()
