#!/usr/bin/env python

import time
import argparse
import esutil as eu
from mdet_lsst_sim.run_sim import run_sim


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--ntrial', type=int, required=True,
                        help='number of sim pairs to run')
    parser.add_argument('--output', required=True, help='output file path')
    parser.add_argument('--config', help='optional simulation config')
    parser.add_argument('--seed', type=int, required=True, help='seed for rng')

    parser.add_argument('--shear', type=float, default=0.02)

    parser.add_argument('--nocancel', action='store_true',
                        help=("don't run two cancelling shears"))

    parser.add_argument('--full-output',
                        action='store_true',
                        help='write all output columns')

    parser.add_argument('--show', action='store_true')
    parser.add_argument('--show-sheared', action='store_true',
                        help='show sheared images')
    parser.add_argument('--show-masks', action='store_true',
                        help='just show image/masks in ds9')
    parser.add_argument('--show-sim', action='store_true',
                        help='show the sim image')

    parser.add_argument('--loglevel', default='info', help='logging level')
    return parser.parse_args()


def load_configs(args):
    if args.config is None:
        config = {}
    else:
        config = eu.io.read(args.config)
        if config is None:
            config = {}

    sim_config = config.get('sim', None)
    mdet_config = config.get('mdet', None)
    coadd_config = config.get('coadd', None)
    return sim_config, mdet_config, coadd_config


def main():

    tm0 = time.time()

    args = get_args()

    sim_config, mdet_config, coadd_config = load_configs(args)

    run_sim(
        seed=args.seed,
        mdet_config=mdet_config,
        coadd_config=coadd_config,
        sim_config=sim_config,
        ntrial=args.ntrial,
        output=args.output,
        shear=args.shear,
        nocancel=args.nocancel,
        full_output=args.full_output,
        show=args.show,
        show_sheared=args.show_sheared,
        show_sim=args.show_sim,
        loglevel=args.loglevel,
    )

    tm_seconds = time.time()-tm0
    tm_minutes = tm_seconds/60.0
    tm_per_trial = tm_seconds/args.ntrial
    print('time: %g minutes' % tm_minutes)
    print('time per trial: %g seconds' % tm_per_trial)


if __name__ == '__main__':
    main()
