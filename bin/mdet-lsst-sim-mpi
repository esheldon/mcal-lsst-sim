#!/usr/bin/env python

import argparse
import numpy as np
from mdet_lsst_sim.run import run
import esutil as eu
import time
from mpi4py.futures import MPIPoolExecutor


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--run', required=True,
                        help='run name for output files')
    parser.add_argument('--njobs', type=int, required=True,
                        help='number of jobs')
    parser.add_argument('--ntrial', type=int, required=True,
                        help='number of sim pairs to run per job')
    parser.add_argument('--config', required=True, help='simulation config')
    parser.add_argument('--seed', type=int, required=True, help='seed for rng')

    parser.add_argument('--replace-bright', action='store_true',
                        help='replace regions marked bright with noise')
    parser.add_argument('--interp-bright', action='store_true',
                        help='interpolate regions marked bright')
    parser.add_argument('--deblend', action='store_true',
                        help=('use the lsst deblender'))

    parser.add_argument('--loglevel', default='warn',
                        help='log level, defaulting to warn for mpi')

    return parser.parse_args()


def dorun(inputs):
    args, sim_config, seed, output = inputs
    run(
        sim_config=sim_config,
        seed=seed,
        ntrial=args.ntrial,
        deblend=args.deblend,
        interp_bright=args.interp_bright,
        replace_bright=args.replace_bright,
        output=output,
        loglevel=args.loglevel,
    )


def main():

    args = get_args()

    tm0 = time.time()
    sim_config = eu.io.read(args.config)

    rng = np.random.RandomState(args.seed)

    inputs = []
    for i in range(args.njobs):
        seed = rng.randint(0, 2**31)
        output = '%s-%010d.fits' % (args.run, seed)

        tinput = (
            args,
            sim_config,
            seed,
            output,
        )

        inputs.append(tinput)

    with MPIPoolExecutor() as executor:
        executor.map(dorun, inputs)

    tm_minutes = (time.time()-tm0)/60.0
    print('time: %g minutes' % tm_minutes)


if __name__ == '__main__':
    main()
