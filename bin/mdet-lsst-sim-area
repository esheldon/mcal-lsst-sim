#!/usr/bin/env python

def get_args():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--config', required=True,
        help='sim config',
    )
    parser.add_argument(
        '--nfiles', type=int, required=True,
        help='number of files in run',
    )
    parser.add_argument(
        '--ntrial', type=int, required=True,
        help='number of trials per file',
    )

    parser.add_argument(
        '--example-files',
        help='optional list of files from which to get the masked fraction',
    )
    return parser.parse_args()


def load_config(fname):
    import yaml
    from descwl_shear_sims.sim import get_sim_config

    with open(fname) as fobj:
        config = yaml.safe_load(fobj)

    sim_config = config.get('sim', None)
    return get_sim_config(sim_config)


def get_mask_frac(flist):
    import numpy as np
    import fitsio

    num = 0
    mask_frac_sum = 0.0
    for f in flist:
        t = fitsio.read(f)
        w, = np.where(t['shear_type'] == 'noshear')
        num += w.size
        mask_frac_sum += t['mask_frac'][w].sum()

    return mask_frac_sum / num


def go():

    args = get_args()

    config = load_config(args.config)
    scale_arcsec = 0.2
    scale_degrees = scale_arcsec / 3600

    drawn_size_pixels = config['coadd_dim'] - 2 * config['buff']

    drawn_area_degrees = (drawn_size_pixels * scale_degrees) ** 2

    total_area_degrees = args.nfiles * args.ntrial * drawn_area_degrees
    print(f'{total_area_degrees:.2f} degrees')

    if args.example_files is not None:
        mask_frac = get_mask_frac(args.example_files)
        print(f'mask_frac: {mask_frac:.2f}')

        unmasked_area = total_area_degrees * (1 - mask_frac)
        print(f'unmasked area: {unmasked_area:.2f} degrees')


go()
