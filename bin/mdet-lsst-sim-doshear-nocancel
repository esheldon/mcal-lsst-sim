#!/usr/bin/env python
import numpy as np
import argparse
import fitsio
import esutil as eu
from descwl_shear_sims.lsst_bits import BRIGHT
from mpi4py.futures import MPIPoolExecutor


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--flist', '-F', required=True)
    parser.add_argument('--max-star-density', type=float, default=20)
    parser.add_argument('--s2n-min', type=float, default=10)
    parser.add_argument('--s2n-max', type=float, default=1000)
    parser.add_argument('--Tratio-min', type=float, default=1.2)
    parser.add_argument('--cut-bright', action='store_true',
                        help='cut objects found in regions marked BRIGHT')
    parser.add_argument('--use-weights', action='store_true')
    return parser.parse_args()


def get_summed(data):
    sdata = data[0].copy()

    for n in sdata.dtype.names:
        sdata[n] = data[n].sum(axis=0)

    return sdata


def sub1(data, subdata):
    odata = data.copy()

    for n in data.dtype.names:
        odata[n] -= subdata[n]

    return odata


def get_m1(data):
    g1 = data['g_ns_sum'][0]/data['wsum_ns']
    g1_1p = data['g_1p_sum'][0]/data['wsum_1p']
    g1_1m = data['g_1m_sum'][0]/data['wsum_1m']

    R11 = (g1_1p - g1_1m)/0.02  # noqa

    s1 = g1/R11

    m1 = s1/0.02 - 1
    return m1


def get_c2(data):
    c2 = data['g_ns_sum'][1]/data['wsum_ns']
    return c2


def jackknife(data):
    sdata = get_summed(data)
    m1 = get_m1(sdata)
    c2 = get_c2(sdata)

    m1vals = np.zeros(data.size)
    c2vals = np.zeros(data.size)

    for i in range(m1vals.size):
        subdata = sub1(sdata, data[i])
        tm1 = get_m1(subdata)
        tc2 = get_c2(subdata)
        m1vals[i] = tm1
        c2vals[i] = tc2

    nchunks = m1vals.size
    fac = (nchunks-1)/float(nchunks)

    m1cov = fac*((m1 - m1vals)**2).sum()
    m1err = np.sqrt(m1cov)

    c2cov = fac*((c2 - c2vals)**2).sum()
    c2err = np.sqrt(c2cov)

    return m1, m1err, c2, c2err


def get_weights(data, ind):
    # err_term = (2/data['wmom_s2n'][ind])
    # return 1.0/(0.2**2 + err_term**2)
    err_term = data['wmom_g_cov'][ind, 0, 0] + data['wmom_g_cov'][ind, 1, 1]

    return 1.0/(2*0.2**2 + err_term)


def get_sums(args, data, stype):
    logic = (
        (data['flags'] == 0) &
        (data['shear_type'] == stype) &
        (data['wmom_s2n'] > args.s2n_min) &
        (data['wmom_s2n'] < args.s2n_max) &
        (data['wmom_T_ratio'] > args.Tratio_min)
    )
    if args.cut_bright:
        logic = logic & (
            (data['ormask'] & BRIGHT == 0)
        )
    w, = np.where(logic)

    g_sum = np.zeros(2)

    if args.use_weights:
        wts = get_weights(data, w)
        g_sum[0] = (wts*data['wmom_g'][w, 0]).sum()
        g_sum[1] = (wts*data['wmom_g'][w, 1]).sum()
        wsum = wts.sum()
    else:
        g_sum[0] = data['wmom_g'][w, 0].sum()
        g_sum[1] = data['wmom_g'][w, 1].sum()
        wsum = w.size

    return g_sum, wsum


def cut_star_density(*, data, max_star_density):
    w, = np.where(data['star_density'] < max_star_density)
    if w.size == 0:
        return None
    else:
        return data[w]


def read_one(inputs):

    index, nf, fname, args = inputs
    print('%d/%d %s' % (index+1, nf, fname))

    dt = [
        ('g_ns_sum', ('f8', 2)),
        ('g_1p_sum', ('f8', 2)),
        ('g_1m_sum', ('f8', 2)),

        ('wsum_ns', 'f8'),
        ('wsum_1p', 'f8'),
        ('wsum_1m', 'f8'),
    ]

    d = np.zeros(1, dtype=dt)

    try:
        with fitsio.FITS(fname) as fobj:
            data_1p = fobj['1p'].read()
            data_1m = fobj['1m'].read()
    except OSError as err:
        print(err)
        return None

    data_1p = cut_star_density(data=data_1p,
                               max_star_density=args.max_star_density)
    data_1m = cut_star_density(data=data_1m,
                               max_star_density=args.max_star_density)

    if data_1p is None or data_1m is None:
        return None

    # data_1m['wmom_g'][:, 0] *= -1

    # from 1p ext
    tg_sum, wsum = get_sums(args, data_1p, 'noshear')

    tg_sum_1p, wsum_1p = get_sums(args, data_1p, '1p')
    tg_sum_1m, wsum_1m = get_sums(args, data_1p, '1m')

    d['g_ns_sum'] = tg_sum
    d['g_1p_sum'] = tg_sum_1p
    d['g_1m_sum'] = tg_sum_1m

    d['wsum_ns'] = wsum
    d['wsum_1p'] = wsum_1p
    d['wsum_1m'] = wsum_1m

    # from 1m ext
    tg_sum, wsum = get_sums(args, data_1m, 'noshear')

    # we are not tryin to cancel
    tg_sum[0] *= -1

    tg_sum_1p, wsum_1p = get_sums(args, data_1m, '1p')
    tg_sum_1m, wsum_1m = get_sums(args, data_1m, '1m')

    d['g_ns_sum'] += tg_sum
    d['g_1p_sum'] += tg_sum_1p
    d['g_1m_sum'] += tg_sum_1m

    d['wsum_ns'] += wsum
    d['wsum_1p'] += wsum_1p
    d['wsum_1m'] += wsum_1m

    return d


def get_flist(args):

    with open(args.flist) as fobj:
        flist = [l.strip() for l in fobj]

    return flist


def print_range(val, err, name):
    """
    print the confidence range 99.7% confidence
    """

    nsigma = 3
    tup = (
        val - err*nsigma,
        name,
        val + err*nsigma,
    )

    print('%g < %s < %g (99.7%%)' % tup)


def main():

    args = get_args()
    flist = get_flist(args)
    print('processing:', len(flist))

    nf = len(flist)
    inputs = [(i, nf, f, args) for i, f in enumerate(flist)]

    with MPIPoolExecutor() as executor:
        dlist = list(executor.map(read_one, inputs))

    print('processed:', len(flist))

    dlist = [d for d in dlist if d is not None]

    data = eu.numpy_util.combine_arrlist(dlist)

    m1, m1err, c2, c2err = jackknife(data)

    print('m1err:', m1err)

    print_range(m1, m1err, 'm1')
    print_range(c2, c2err, 'c2')


if __name__ == '__main__':
    main()
