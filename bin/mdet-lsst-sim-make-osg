#!/usr/bin/env python
import os
import random
import argparse
import shutil
import yaml
import time
import esutil as eu


CONDOR_SUBMIT_HEAD = r"""
universe     = vanilla

# usatlas sites don't seem to work
# the others are black holes with no http access
Requirements = \
        HAS_SINGULARITY == TRUE && \
        OSG_HOST_KERNEL_VERSION >= 31000 && \
        (OSGVO_OS_VERSION == "7" || OSGVO_OS_VERSION == "6") && \
        regexp("usatlas", target.machine) == FALSE && \
        regexp("htc0296", target.machine) == FALSE

+SingularityImage = "/cvmfs/singularity.opensciencegrid.org/beckermr/stackvana:latest"

# +WantsStashCache = true
# +SingularityBindCVMFS = True

should_transfer_files = YES
transfer_input_files = %(sim_config)s,%(mdet_config)s,%(codes_tarfile)s,/home/esheldon/test-lsst-mdet/catsim.tar.gz

# transfer only if the job completes
when_to_transfer_output = ON_EXIT

Executable = %(script)s
"""

CONDOR_JOB_TEMPLATE = """
+job_name = "%(job_name)s"
Output = %(condor_output)s
Error = %(condor_error)s
Arguments = %(seed)d %(output)s %(logfile)s
Queue
"""  # noqa


def get_script_file(seed):
    return 'run-%010d.sh' % seed


def copy_file_to_rundir(config_file):
    print('copying', config_file)
    shutil.copy(config_file, '.')


def get_name_base(run, seed):
    return '%s-%010d' % (run, seed)


def get_condor_script_file(run, seed):
    name = get_name_base(run, seed)
    return '%s.condor' % name


def get_output(run, seed):
    name = get_name_base(run, seed)
    return '%s.fits' % name


def get_condor_output(run, seed):
    name = get_name_base(run, seed)
    return '%s.out' % name


def get_condor_error(run, seed):
    name = get_name_base(run, seed)
    return '%s.err' % name


def get_logfile(run, seed):
    name = get_name_base(run, seed)
    return '%s.log' % name


SCRIPT_TEMPLATE = r"""#!/usr/bin/env bash

set -e

seed=$1
output=$2
logfile=$3

uname -a

export OMP_NUM_THREADS=1

cdir=catsim
tarfile=${cdir}.tar.gz
# cp -v /cvmfs/stash.osgstorage.org/osgconnect/public/esheldon/${tarfile} .
tar xvfz ${tarfile}
# rm -v ${tarfile}
export CATSIM_DIR=${cdir}

# The rest of this is getting the python environment set up
unset PYTHONPATH
. /usr/local/share/stackvana-activate.sh

# pip needs a place to write, /tmp seems to be full or not writeable
export TMPDIR=.
# for pip installs
export PATH=$HOME/.local/bin:$PATH

codes_tarfile=%(codes_tarfile)s
tar xvfz ${codes_tarfile}
codes_dir=$(echo ${codes_tarfile} | sed 's/\.tar\.gz//')

for package in descwl-shear-sims descwl_coadd metadetect mdet-lsst-sim; do
    package_dir="${codes_dir}/${package}"
    pushd $package_dir
    pip install --no-deps .
    popd
done

rm -rf ${codes_dir}

mdet-lsst-sim \
    --seed ${seed} \
    --config %(sim_config)s \
    --mdet-config %(mdet_config)s \
    --ntrial %(ntrial)d \
    %(use_sx)s \
    %(deblend)s \
    %(interp_bright)s \
    --output ${output} &> ${logfile}

rm -rfv ${cdir}
"""


def write_script(*, args, sim_config, use_sx,
                 deblend, mdet_config, interp_bright):

    codes_tarfile = os.path.basename(get_code_tarfile_path(args))

    script_file = get_script_file(args.seed)
    print('writing:', script_file)
    with open(script_file, 'w') as fobj:
        text = SCRIPT_TEMPLATE % {
            'ntrial': args.ntrial,
            'sim_config': sim_config,
            'use_sx': use_sx,
            'deblend': deblend,
            'interp_bright': interp_bright,
            'mdet_config': mdet_config,
            'codes_tarfile': codes_tarfile,
        }
        fobj.write(text)

    os.system('chmod 755 %s' % script_file)


def get_code_tarfile_dir():
    return '/home/esheldon/test-lsst-mdet/code-tarfiles'


def get_code_tarfile_path(args):
    dir = get_code_tarfile_dir()
    cf = os.path.basename(args.codes_config).replace('.yaml', '')
    assert cf != args.codes_config

    return os.path.join(dir, '%s-codes.tar.gz' % cf)


def make_codes_tarball(*, codes_config, codes_tarfile):

    ds = eu.ostools.DirStack()

    if os.path.exists(codes_tarfile):
        print('tarfile already exists:', codes_tarfile)
        return

    tarfile_dir = get_code_tarfile_dir()
    if not os.path.exists(tarfile_dir):
        os.makedirs(tarfile_dir)

    ds.push(tarfile_dir)

    basefile = os.path.basename(codes_tarfile)

    packages_dir = basefile.replace('.tar.gz', '')
    assert packages_dir != basefile

    if os.path.exists(packages_dir):
        shutil.rmtree(packages_dir)

    os.makedirs(packages_dir)

    # into the directory holding the packages
    ds.push(packages_dir)

    for package in codes_config:
        ret = os.system('git clone %s' % codes_config[package]['url'])
        assert ret == 0

        ds.push(package)

        ret = os.system('git checkout %s' % codes_config[package]['hash'])
        assert ret == 0

        ret = os.system('rm -rf .git')
        assert ret == 0

        ds.pop()

    # back to the main tarfile dir
    ds.pop()
    time.sleep(1)
    os.system('tar cvfz %s %s' % (codes_tarfile, packages_dir))

    shutil.rmtree(packages_dir)

    # back to where we came from
    ds.pop()


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--run', required=True)
    parser.add_argument('--seed', type=int, required=True, help='seed for rng')
    parser.add_argument('--njobs', type=int, required=True)
    parser.add_argument('--ntrial', type=int, required=True,
                        help='number of sim pairs to run for each job')
    parser.add_argument('--config', required=True, help='simulation config')
    parser.add_argument('--mdet-config', required=True, help='mdet config')
    parser.add_argument('--codes-config', required=True, help='code url/hash config')

    parser.add_argument('--interp-bright', action='store_true',
                        help='interpolate regions marked bright')

    parser.add_argument('--use-sx', action='store_true',
                        help=('use sx based metadetect'))
    parser.add_argument('--deblend', action='store_true',
                        help=('use the lsst deblender'))

    return parser.parse_args()


def load_yaml(path):
    with open(path) as fobj:
        data = yaml.safe_load(fobj)
    return data


def main():
    args = get_args()

    copy_file_to_rundir(args.config)
    copy_file_to_rundir(args.mdet_config)
    sim_config_base = os.path.basename(args.config)
    mdet_config_base = os.path.basename(args.mdet_config)

    codes_config = load_yaml(args.codes_config)

    codes_tarfile = get_code_tarfile_path(args)

    make_codes_tarball(codes_config=codes_config, codes_tarfile=codes_tarfile)
    copy_file_to_rundir(codes_tarfile)

    if args.use_sx:
        use_sx = '--use-sx'
    else:
        use_sx = ''

    if args.deblend:
        deblend = '--deblend'
    else:
        deblend = ''

    if args.interp_bright:
        interp_bright = '--interp-bright'
    else:
        interp_bright = ''

    random.seed(args.seed)

    condor_file = get_condor_script_file(args.run, args.seed)

    if os.path.exists(condor_file):
        raise RuntimeError('script already exists: %s' % condor_file)

    write_script(
        args=args,
        sim_config=sim_config_base,
        use_sx=use_sx,
        deblend=deblend,
        interp_bright=interp_bright,
        mdet_config=mdet_config_base,
    )
    script_file = get_script_file(args.seed)

    with open(condor_file, 'w') as fobj:
        fobj.write(CONDOR_SUBMIT_HEAD % {
            'sim_config': sim_config_base,
            'mdet_config': mdet_config_base,
            'codes_tarfile': os.path.basename(codes_tarfile),
            'script': script_file,
        })

        for i in range(args.njobs):

            seed = random.randint(0, 2**31)
            output = get_output(args.run, seed)
            condor_output = get_condor_output(args.run, seed)
            condor_error = get_condor_error(args.run, seed)
            logfile = get_logfile(args.run, seed)
            job_name = '%s-%010d' % (args.run, seed)

            job_text = CONDOR_JOB_TEMPLATE % {
                'job_name': job_name,
                'seed': seed,
                'output': output,
                'condor_output': condor_output,
                'condor_error': condor_error,
                'logfile': logfile,
            }

            fobj.write(job_text)

    print(condor_file)
    print('wrote:', args.njobs)


main()
